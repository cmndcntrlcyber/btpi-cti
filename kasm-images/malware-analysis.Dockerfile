# Name: CTI Malware Analysis Workspace
# Description: Specialized workspace for malware analysis and reverse engineering
# Category: Security

FROM kasmweb/core-ubuntu-focal:latest
USER root

ENV HOME /home/kasm-default-profile
ENV STARTUPDIR /dockerstartup
ENV INST_SCRIPTS $STARTUPDIR/install
WORKDIR $HOME

# Install common tools in a single layer to reduce image size
RUN apt-get update && apt-get install -y --no-install-recommends \
    curl \
    wget \
    git \
    python3-pip \
    python3-venv \
    build-essential \
    unzip \
    file \
    binutils \
    strace \
    ltrace \
    radare2 \
    gdb \
    hexedit \
    xxd \
    yara \
    libpcap-dev \
    net-tools \
    netcat \
    tcpdump \
    vim \
    qemu-system-x86 \
    openjdk-11-jdk \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# Install Ghidra (latest version)
RUN mkdir -p /opt/ghidra && \
    wget -q -O /tmp/ghidra.zip https://github.com/NationalSecurityAgency/ghidra/releases/download/Ghidra_10.4_build/ghidra_10.4_PUBLIC_20230928.zip && \
    unzip /tmp/ghidra.zip -d /opt && \
    rm /tmp/ghidra.zip && \
    mv /opt/ghidra_* /opt/ghidra && \
    chmod +x /opt/ghidra/ghidraRun

# Install Python analysis tools
RUN pip3 install --no-cache-dir \
    pefile \
    pyelftools \
    capstone \
    r2pipe \
    yara-python \
    volatility3 \
    frida-tools \
    pyinstaller \
    binwalk \
    vt-cli \
    ssdeep \
    oletools \
    && pip3 cache purge

# Install REMNUX tools
RUN apt-get update && apt-get install -y --no-install-recommends \
    python3-dev \
    libssl-dev \
    swig \
    inetsim \
    wireshark \
    tshark \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# Install FLOSS (FireEye Labs Obfuscated String Solver)
RUN pip3 install --no-cache-dir \
    https://github.com/mandiant/flare-floss/releases/download/v2.0.0/floss-v2.0.0-py3-none-linux_x86_64.whl \
    && pip3 cache purge

# Install CyberChef
RUN mkdir -p /opt/cyberchef \
    && wget -q -O /tmp/cyberchef.zip https://github.com/gchq/CyberChef/releases/download/v10.5.2/CyberChef_v10.5.2.zip \
    && unzip /tmp/cyberchef.zip -d /opt/cyberchef \
    && rm /tmp/cyberchef.zip

# Install Cutter (Radare2 GUI)
RUN mkdir -p /opt/cutter \
    && wget -q -O /tmp/cutter.AppImage https://github.com/rizinorg/cutter/releases/download/v2.1.2/Cutter-v2.1.2-Linux-x86_64.AppImage \
    && chmod +x /tmp/cutter.AppImage \
    && cd /opt/cutter \
    && /tmp/cutter.AppImage --appimage-extract \
    && mv squashfs-root/* . \
    && rmdir squashfs-root \
    && rm /tmp/cutter.AppImage \
    && ln -s /opt/cutter/AppRun /usr/local/bin/cutter

# Create isolated analysis environment directory
RUN mkdir -p $HOME/malware_samples \
    && chmod 750 $HOME/malware_samples \
    && echo 'DANGER: Files in this directory should be considered UNSAFE!' > $HOME/malware_samples/README.txt

# Create desktop shortcuts
RUN mkdir -p $HOME/Desktop \
    && echo "[Desktop Entry]\nVersion=1.0\nType=Application\nName=Ghidra\nComment=Software Reverse Engineering Suite\nExec=/opt/ghidra/ghidraRun\nIcon=\nPath=/opt/ghidra\nTerminal=false\nStartupNotify=false" > $HOME/Desktop/ghidra.desktop \
    && echo "[Desktop Entry]\nVersion=1.0\nType=Application\nName=Radare2\nComment=Reverse Engineering Framework\nExec=gnome-terminal -- r2\nIcon=\nPath=\nTerminal=true\nStartupNotify=false" > $HOME/Desktop/radare2.desktop \
    && echo "[Desktop Entry]\nVersion=1.0\nType=Application\nName=CyberChef\nComment=Cyber Swiss Army Knife\nExec=firefox /opt/cyberchef/CyberChef_v10.5.2.html\nIcon=\nPath=\nTerminal=false\nStartupNotify=false" > $HOME/Desktop/cyberchef.desktop \
    && echo "[Desktop Entry]\nVersion=1.0\nType=Application\nName=Cutter\nComment=Radare2 GUI\nExec=cutter\nIcon=\nPath=\nTerminal=false\nStartupNotify=false" > $HOME/Desktop/cutter.desktop

# Create sandbox warning on desktop
RUN echo "WARNING: This is a malware analysis environment. Files in the malware_samples directory should be considered UNSAFE! Do not use for general browsing or other activities." > $HOME/Desktop/SANDBOX_WARNING.txt

# Add analysis scripts directory
RUN mkdir -p $HOME/analysis_scripts

# Create script for quick string extraction
RUN echo '#!/bin/bash\n\
if [ -z "$1" ]; then\n\
    echo "Usage: $0 <file>"\n\
    exit 1\n\
fi\n\
echo "=== ASCII Strings ==="\n\
strings "$1"\n\
echo -e "\n=== Unicode Strings ==="\n\
strings -el "$1"\n\
echo -e "\n=== FLOSS Decoded Strings ==="\n\
floss "$1"\n\
' > $HOME/analysis_scripts/extract_strings.sh

# Create script for basic static analysis
RUN echo '#!/bin/bash\n\
if [ -z "$1" ]; then\n\
    echo "Usage: $0 <file>"\n\
    exit 1\n\
fi\n\
echo "=== File Info ==="\n\
file "$1"\n\
echo -e "\n=== File Hashes ==="\n\
sha256sum "$1"\n\
md5sum "$1"\n\
if command -v ssdeep > /dev/null; then\n\
    echo -e "\n=== Fuzzy Hash ==="\n\
    ssdeep "$1"\n\
fi\n\
echo -e "\n=== PE Info (if applicable) ==="\n\
python3 -c "import pefile; print(pefile.PE(\"$1\") if \"Windows\" in open(\"$1\", \"rb\").read(100).decode(\"latin-1\", errors=\"ignore\") else \"Not a PE file\")" 2>/dev/null || echo "Not a PE file"\n\
' > $HOME/analysis_scripts/analyze_file.sh

# Create script for checking a file with VirusTotal
RUN echo '#!/bin/bash\n\
if [ -z "$1" ]; then\n\
    echo "Usage: $0 <file>"\n\
    exit 1\n\
fi\n\
if [ -z "$VT_API_KEY" ]; then\n\
    echo "Error: VT_API_KEY environment variable not set."\n\
    echo "Set it with: export VT_API_KEY=your_api_key_here"\n\
    exit 1\n\
fi\n\
\n\
hash=$(sha256sum "$1" | cut -d" " -f1)\n\
echo "Checking file hash: $hash on VirusTotal..."\n\
vt file "$hash"\n\
' > $HOME/analysis_scripts/virustotal_check.sh

# Make scripts executable
RUN chmod +x $HOME/analysis_scripts/*.sh

# Create useful aliases and environment in bashrc
RUN echo '# Malware Analysis Aliases and Functions\n\
alias ll="ls -la"\n\
alias strings-all="$HOME/analysis_scripts/extract_strings.sh"\n\
alias analyze="$HOME/analysis_scripts/analyze_file.sh"\n\
alias vtcheck="$HOME/analysis_scripts/virustotal_check.sh"\n\
\n\
# Safety Functions\n\
function malware_analyze() {\n\
    cd $HOME/malware_samples\n\
    echo "==================================="\n\
    echo "MALWARE ANALYSIS ENVIRONMENT ACTIVE"\n\
    echo "==================================="\n\
    echo "You are now in the isolated malware samples directory."\n\
    echo "Be careful when executing any samples!"\n\
    PS1="\\[\\033[1;31m\\](MALWARE-ENV) \\w\\$ \\[\\033[0m\\]"\n\
}\n\
\n\
function sandbox_reset() {\n\
    cd $HOME\n\
    echo "Exited the malware environment."\n\
    PS1="\\[\\033[1;37m\\]\\w\\$ \\[\\033[0m\\]"\n\
}\n\
\n\
# Welcome Message\n\
echo -e "\n\\e[1;33mMALWARE ANALYSIS WORKSPACE\\e[0m"\n\
echo -e "\\e[1;31mWARNING: This workspace is for malware analysis!\\e[0m"\n\
echo -e "\\e[1;31mDo not use for regular browsing or activities.\\e[0m"\n\
echo -e "\nAvailable tools:"\n\
echo -e " - Ghidra, Radare2, Cutter"\n\
echo -e " - FLOSS, Volatility3, YARA"\n\
echo -e " - CyberChef, VirusTotal CLI"\n\
echo -e "\nUseful commands:"\n\
echo -e " - malware_analyze - Enter isolated analysis directory"\n\
echo -e " - strings-all <file> - Extract all types of strings"\n\
echo -e " - analyze <file> - Quick static analysis"\n\
echo -e " - vtcheck <file> - Check file on VirusTotal (needs API key)"\n\
echo -e " - sandbox_reset - Exit isolated environment"\n\
' >> $HOME/.bashrc

# Set permissions
RUN chmod +x $HOME/Desktop/*.desktop \
    && chown -R 1000:1000 $HOME

# Switch back to default user
USER 1000
