version: '3.8'

networks:
  cti-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
          gateway: 172.20.0.1

volumes:
  db_data: # GRR MySQL data
  client_installers: # GRR client installers
  client_state: # GRR client state
  cassandra_data: # For TheHive
  elasticsearch_data: # For TheHive and Cortex
  minio_data: # For TheHive
  misp_data: # For MISP
  portainer_data: # For Portainer
  kasm_data: # For Kasm Workspaces
  redis_data: # For Redis persistence

services:
  # === Portainer for container management ===
  portainer:
    image: portainer/portainer-ce:latest
    container_name: portainer
    restart: unless-stopped
    ports:
      - "9000:8000"  # Changed from 8000:8000 to avoid conflict with Attack Flow
      - "9010:9000"  # Changed from 9000:9000 to avoid conflict with TheHive
      - "9443:9443"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - portainer_data:/data
    networks:
      - cti-network
    security_opt:
      - no-new-privileges:true
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 5s

  # === GRR MySQL Database ===
  grr-db:
    image: mysql:8.2
    container_name: grr-db
    hostname: mysql-host
    command:
      - --max_allowed_packet=40M
      - --log_bin_trust_function_creators=1
      - --innodb_redo_log_capacity=167772160
      - --innodb_log_file_size=2500M
    restart: unless-stopped
    environment:
      - MYSQL_ROOT_PASSWORD_FILE=/run/secrets/mysql_root_password
      - MYSQL_DATABASE=grr
      - MYSQL_USER=grr
      - MYSQL_PASSWORD_FILE=/run/secrets/mysql_password
    volumes:
      - db_data:/var/lib/mysql:rw
      - ./secrets/mysql_root_password:/run/secrets/mysql_root_password:ro
      - ./secrets/mysql_password:/run/secrets/mysql_password:ro
    ports:
      - "3306:3306"
    networks:
      - cti-network
    security_opt:
      - no-new-privileges:true
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "grr", "-p$$(cat /run/secrets/mysql_password)"]
      interval: 5s
      timeout: 5s
      retries: 10

  # === GRR Components ===
  grr-admin-ui:
    image: ghcr.io/google/grr:latest
    container_name: grr-admin-ui
    hostname: admin-ui
    depends_on:
      grr-db:
        condition: service_healthy
      fleetspeak-admin:
        condition: service_started
    volumes:
      - ./grr_configs:/configs/
      - client_installers:/client_installers
    ports:
      - "8001:8000"
    networks:
      - cti-network
    security_opt:
      - no-new-privileges:true
    entrypoint: [
      "/bin/bash",
      "-c",
      "/configs/server/repack_clients.sh && grr_server -component admin_ui -config /configs/server/grr.server.yaml --verbose"
    ]
    healthcheck:
      test: "/configs/healthchecks/grr-admin-ui.sh"
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  grr-fleetspeak-frontend:
    image: ghcr.io/google/grr:latest
    container_name: grr-fleetspeak-frontend
    hostname: grr-fleetspeak-frontend
    depends_on:
      grr-db:
        condition: service_healthy
    volumes:
      - ./grr_configs:/configs
    expose:
      - "11111"
    restart: unless-stopped
    networks:
      - cti-network
    security_opt:
      - no-new-privileges:true
    command:
      - -component
      - frontend
      - -config
      - /configs/server/grr.server.yaml
      - --verbose

  fleetspeak-admin:
    image: ghcr.io/google/fleetspeak:latest
    container_name: fleetspeak-admin
    hostname: fleetspeak-admin
    depends_on:
      grr-db:
        condition: service_healthy
    networks:
      - cti-network
    security_opt:
      - no-new-privileges:true
    expose:
      - "4444"
    volumes:
      - ./grr_configs:/configs
    entrypoint: [
      "server",
      "-components_config",
      "/configs/server/textservices/admin.components.config",
      "-services_config",
      "/configs/server/grr_frontend.service",
      "-alsologtostderr",
      "-v",
      "1000"
    ]

  fleetspeak-frontend:
    image: ghcr.io/google/fleetspeak:latest
    container_name: fleetspeak-frontend
    hostname: fleetspeak-frontend
    depends_on:
      grr-db:
        condition: service_healthy
    networks:
      - cti-network
    security_opt:
      - no-new-privileges:true
    expose:
      - "4443"
      - "10000"
    volumes:
      - ./grr_configs:/configs
    entrypoint: [
      "server",
      "-components_config",
      "/configs/server/textservices/frontend.components.config",
      "-services_config",
      "/configs/server/grr_frontend.service",
      "-alsologtostderr",
      "-v",
      "1000"
    ]

  grr-worker:
    image: ghcr.io/google/grr:latest
    container_name: grr-worker
    volumes:
      - ./grr_configs:/configs
    hostname: grr-worker
    depends_on:
      grr-db:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - cti-network
    security_opt:
      - no-new-privileges:true
    command:
      - -component
      - worker
      - -config
      - /configs/server/grr.server.yaml
      - --verbose

  # === TheHive Components ===
  cassandra:
    image: 'cassandra:latest'
    container_name: cassandra
    hostname: cassandra
    mem_limit: 2048m
    ports:
      - "9042:9042"
    environment:
      - MAX_HEAP_SIZE=1024M
      - HEAP_NEWSIZE=1024M
      - CASSANDRA_CLUSTER_NAME=TheHive
    volumes:
      - cassandra_data:/var/lib/cassandra
    restart: unless-stopped
    networks:
      - cti-network
    security_opt:
      - no-new-privileges:true
    healthcheck:
      test: ["CMD-SHELL", "nodetool status | grep -q '^UN'"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.17.16
    container_name: elasticsearch
    hostname: elasticsearch
    mem_limit: 2048m
    ports:
      - "9200:9200"
      - "9300:9300"
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=true
      - ELASTIC_PASSWORD_FILE=/run/secrets/elastic_password
      - "ES_JAVA_OPTS=-Xms1g -Xmx1g"
      - bootstrap.memory_lock=true
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
      - ./secrets/elastic_password:/run/secrets/elastic_password:ro
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
    networks:
      - cti-network
    security_opt:
      - no-new-privileges:true
    healthcheck:
      test: ["CMD-SHELL", "curl --silent --fail http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  minio:
    image: quay.io/minio/minio:latest
    container_name: minio
    hostname: minio
    mem_limit: 1024m
    command: ["server", "/data", "--console-address", ":9090"]
    environment:
      - MINIO_ROOT_USER_FILE=/run/secrets/minio_root_user
      - MINIO_ROOT_PASSWORD_FILE=/run/secrets/minio_root_password
    ports:
      - "10000:9000"  # Changed from 9000 to avoid conflict with TheHive
      - "9090:9090"   # Minio console
    volumes:
      - minio_data:/data
      - ./secrets/minio_root_user:/run/secrets/minio_root_user:ro
      - ./secrets/minio_root_password:/run/secrets/minio_root_password:ro
    networks:
      - cti-network
    security_opt:
      - no-new-privileges:true
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 30s

  cortex:
    image: thehiveproject/cortex:latest
    container_name: cortex
    hostname: cortex
    depends_on:
      elasticsearch:
        condition: service_healthy
    environment:
      - job_directory=/tmp/cortex-jobs
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /tmp/cortex-jobs:/tmp/cortex-jobs
    ports:
      - "9001:9001"
    networks:
      - cti-network
    security_opt:
      - no-new-privileges:true
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9001/api/status"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 30s

  thehive:
    image: strangebee/thehive:5.2.7-1
    container_name: thehive
    hostname: thehive
    depends_on:
      cassandra:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
      minio:
        condition: service_healthy
      cortex:
        condition: service_healthy
    mem_limit: 2048m
    ports:
      - "9000:9000"
    environment:
      - JVM_OPTS=-Xms1536M -Xmx1536M
    volumes:
      - ./thehive-application.conf:/etc/thehive/application.conf:ro
    command:
      - --secret-file
      - /run/secrets/thehive_secret
      - "--cql-hostnames"
      - "cassandra"
      - "--index-backend"
      - "elasticsearch"
      - "--es-hostnames"
      - "elasticsearch"
      - "--s3-endpoint"
      - "http://minio:9000"
      - "--s3-access-key-file"
      - "/run/secrets/minio_root_user"
      - "--s3-secret-key-file"
      - "/run/secrets/minio_root_password"
      - "--s3-bucket"
      - "thehive"
      - "--s3-use-path-access-style"
      - "--cortex-hostnames"
      - "cortex"
      - "--cortex-keys-file"
      - "/run/secrets/cortex_api_key"
    secrets:
      - thehive_secret
      - minio_root_user
      - minio_root_password
      - cortex_api_key
    networks:
      - cti-network
    security_opt:
      - no-new-privileges:true
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/api/status"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 60s

  # === MISP Components ===
  misp-core:
    image: ghcr.io/misp/misp-docker/misp-core:latest
    container_name: misp-core
    hostname: misp
    ports:
      - "8083:80"     # Changed from 8080:80 to avoid conflict with Gophish
      - "8443:443"    # Changed from 443:443 to avoid conflict with Kasm Workspaces
    environment:
      - MYSQL_HOST=misp-db
      - MYSQL_DATABASE=misp
      - MYSQL_USER=misp
      - MYSQL_PASSWORD_FILE=/run/secrets/misp_mysql_password
      - MISP_ADMIN_EMAIL=admin@example.com
      - MISP_ADMIN_PASSWORD_FILE=/run/secrets/misp_admin_password
      - REDIS_FQDN=redis
    volumes:
      - misp_data:/var/www/MISP/app/files
      - ./secrets/misp_mysql_password:/run/secrets/misp_mysql_password:ro
      - ./secrets/misp_admin_password:/run/secrets/misp_admin_password:ro
    networks:
      - cti-network
    security_opt:
      - no-new-privileges:true
    depends_on:
      - misp-db
      - redis
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/users/login"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  misp-modules:
    image: ghcr.io/misp/misp-docker/misp-modules:latest
    container_name: misp-modules
    restart: unless-stopped
    environment:
      - REDIS_BACKEND=redis
    depends_on:
      - redis
      - misp-core
    networks:
      - cti-network
    security_opt:
      - no-new-privileges:true

  misp-db:
    image: mysql:8.0
    container_name: misp-db
    restart: unless-stopped
    environment:
      - MYSQL_ROOT_PASSWORD_FILE=/run/secrets/misp_root_password
      - MYSQL_DATABASE=misp
      - MYSQL_USER=misp
      - MYSQL_PASSWORD_FILE=/run/secrets/misp_mysql_password
    volumes:
      - misp_data:/var/lib/mysql
      - ./secrets/misp_root_password:/run/secrets/misp_root_password:ro
      - ./secrets/misp_mysql_password:/run/secrets/misp_mysql_password:ro
    networks:
      - cti-network
    security_opt:
      - no-new-privileges:true
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "misp", "-p$$(cat /run/secrets/misp_mysql_password)"]
      interval: 5s
      timeout: 5s
      retries: 10

  redis:
    image: redis:alpine
    container_name: redis
    restart: unless-stopped
    volumes:
      - redis_data:/data
    networks:
      - cti-network
    security_opt:
      - no-new-privileges:true
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5

  # Integration helper
  integration-api:
    image: nginx:alpine
    container_name: cti-integration-api
    restart: unless-stopped
    volumes:
      - ./integrations:/usr/share/nginx/html:ro
      - ./configs/nginx/default.conf:/etc/nginx/conf.d/default.conf:ro
    ports:
      - "8888:80"
    networks:
      - cti-network
    security_opt:
      - no-new-privileges:true
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/status"]
      interval: 30s
      timeout: 5s
      retries: 3

secrets:
  mysql_root_password:
    file: ./secrets/mysql_root_password
  mysql_password:
    file: ./secrets/mysql_password
  elastic_password:
    file: ./secrets/elastic_password
  minio_root_user:
    file: ./secrets/minio_root_user
  minio_root_password:
    file: ./secrets/minio_root_password
  thehive_secret:
    file: ./secrets/thehive_secret
  cortex_api_key:
    file: ./secrets/cortex_api_key
  misp_root_password:
    file: ./secrets/misp_root_password
  misp_mysql_password:
    file: ./secrets/misp_mysql_password
  misp_admin_password:
    file: ./secrets/misp_admin_password
