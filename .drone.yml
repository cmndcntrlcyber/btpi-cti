kind: pipeline
type: docker
name: btpi-cti-pipeline

environment:
  PROJECT_ID: ${DRONE_REPO_NAME}
  REGISTRY: gcr.io
  REGION: us-central1
  CLUSTER_NAME: btpi-cti-cluster
  GCP_SERVICE_ACCOUNT_KEY:
    from_secret: gcp_credentials
  VAULT_ADDR: http://vault:8200
  VAULT_TOKEN:
    from_secret: vault_token

trigger:
  branch:
    - main
    - develop
  event:
    - push
    - tag

services:
  - name: vault
    image: hashicorp/vault:latest
    ports:
      - 8200
    environment:
      VAULT_DEV_ROOT_TOKEN_ID:
        from_secret: vault_token
      VAULT_DEV_LISTEN_ADDRESS: 0.0.0.0:8200
    command:
      - server
      - -dev
      
steps:
  - name: vault-setup
    image: hashicorp/vault:latest
    environment:
      VAULT_ADDR: http://vault:8200
      VAULT_TOKEN:
        from_secret: vault_token
    commands:
      - vault secrets enable -path=secrets kv || echo "KV already enabled"
      - vault kv put secrets/mysql password="${MYSQL_PASSWORD}" root_password="${MYSQL_ROOT_PASSWORD}"
      - vault kv put secrets/misp admin_password="${MISP_ADMIN_PASSWORD}" mysql_password="${MISP_MYSQL_PASSWORD}"
      - vault kv put secrets/cortex api_key="${CORTEX_API_KEY}" 
      - vault kv put secrets/elastic password="${ELASTIC_PASSWORD}"
      - vault kv put secrets/thehive secret="${THEHIVE_SECRET}"
      - echo "Vault configured with necessary secrets"
    depends_on:
      - vault
      
  - name: setup-env
    image: alpine
    commands:
      - echo "TIMESTAMP=$(date +%Y%m%d%H%M%S)" > .env
      - echo "SHORT_COMMIT=${DRONE_COMMIT_SHA:0:8}" >> .env
      - echo "TAG=$${DRONE_TAG:-latest}" >> .env
      - echo "ENV=${DRONE_BRANCH}" >> .env
      - cat .env
    
  - name: load-vars
    image: alpine
    commands:
      - source .env && echo "Loaded environment variables"
      - env | grep -E "TIMESTAMP|SHORT_COMMIT|TAG|ENV"
    depends_on:
      - setup-env
  
  - name: validate-compose
    image: docker/compose:latest
    volumes:
      - name: docker_socket
        path: /var/run/docker.sock
    commands:
      - docker-compose config
    depends_on:
      - load-vars
      
  - name: run-tests
    image: alpine
    commands:
      - cd tests
      - source ../.env
      - echo "Running tests in $${ENV} environment"
      - if [ -f ./component-tests/run.sh ]; then ./component-tests/run.sh; fi
      - if [ -f ./integration-tests/run.sh ]; then ./integration-tests/run.sh; fi
    depends_on:
      - validate-compose
  
  - name: authenticate-gcp
    image: google/cloud-sdk:slim
    environment:
      GCP_SERVICE_ACCOUNT_KEY:
        from_secret: gcp_credentials
    commands:
      - echo "$${GCP_SERVICE_ACCOUNT_KEY}" > /tmp/gcp-key.json
      - gcloud auth activate-service-account --key-file=/tmp/gcp-key.json
      - gcloud config set project $${PROJECT_ID}
      - gcloud auth configure-docker $${REGISTRY} --quiet
    depends_on:
      - run-tests
  
  - name: build-docker-images
    image: hashicorp/vault:latest
    volumes:
      - name: docker_socket
        path: /var/run/docker.sock
    environment:
      VAULT_ADDR: http://vault:8200
      VAULT_TOKEN:
        from_secret: vault_token
    commands:
      - apk add --no-cache docker
      - source .env
      - "# Get secrets from Vault"
      - export MYSQL_PASSWORD=$(vault kv get -field=password secrets/mysql)
      - export MYSQL_ROOT_PASSWORD=$(vault kv get -field=root_password secrets/mysql)
      - export MISP_ADMIN_PASSWORD=$(vault kv get -field=admin_password secrets/misp)
      - export CORTEX_API_KEY=$(vault kv get -field=api_key secrets/cortex)
      - export ELASTIC_PASSWORD=$(vault kv get -field=password secrets/elastic)
      - export THEHIVE_SECRET=$(vault kv get -field=secret secrets/thehive)
      - docker-compose build
      - cd kasm-images
      - docker build -t $${REGISTRY}/$${PROJECT_ID}/threat-hunting:$${TAG}-$${SHORT_COMMIT} -f threat-hunting.Dockerfile .
      - docker build -t $${REGISTRY}/$${PROJECT_ID}/malware-analysis:$${TAG}-$${SHORT_COMMIT} -f malware-analysis.Dockerfile .
      - docker build -t $${REGISTRY}/$${PROJECT_ID}/osint:$${TAG}-$${SHORT_COMMIT} -f osint.Dockerfile .
      - docker push $${REGISTRY}/$${PROJECT_ID}/threat-hunting:$${TAG}-$${SHORT_COMMIT}
      - docker push $${REGISTRY}/$${PROJECT_ID}/malware-analysis:$${TAG}-$${SHORT_COMMIT}
      - docker push $${REGISTRY}/$${PROJECT_ID}/osint:$${TAG}-$${SHORT_COMMIT}
    depends_on:
      - authenticate-gcp
  
  - name: deploy-to-gke
    image: google/cloud-sdk:slim
    environment:
      KUBECONFIG_DATA:
        from_secret: kubeconfig
    commands:
      - source .env
      - echo "$${KUBECONFIG_DATA}" > /tmp/kubeconfig
      - export KUBECONFIG=/tmp/kubeconfig
      - gcloud container clusters get-credentials $${CLUSTER_NAME} --region $${REGION}
      - envsubst < kubernetes/deployment.yaml > /tmp/deployment.yaml
      - kubectl apply -f /tmp/deployment.yaml
      - kubectl rollout status deployment/btpi-cti
    depends_on:
      - build-docker-images
    when:
      branch:
        - main
        - master
  
  - name: deploy-to-cloud-run
    image: hashicorp/vault:latest
    commands:
      - apk add --no-cache curl python3 py3-pip
      - pip install hvac
      - apk add --no-cache google-cloud-sdk
      - source .env
      - "# Get secrets from Vault via Python"
      - >-
        python3 -c "
        import hvac, os, subprocess;
        client = hvac.Client(url=os.environ['VAULT_ADDR'], token=os.environ['VAULT_TOKEN']);
        secrets = {};
        secrets.update(client.secrets.kv.read_secret_version(path='mysql')['data']['data']);
        secrets.update(client.secrets.kv.read_secret_version(path='misp')['data']['data']);
        secrets.update(client.secrets.kv.read_secret_version(path='cortex')['data']['data']);
        secrets.update(client.secrets.kv.read_secret_version(path='elastic')['data']['data']);
        secrets.update(client.secrets.kv.read_secret_version(path='thehive')['data']['data']);
        env_vars = ','.join([f'{k}={v}' for k,v in secrets.items()]);
        registry = os.environ['REGISTRY'];
        project_id = os.environ['PROJECT_ID'];
        tag = os.environ['TAG'];
        short_commit = os.environ['SHORT_COMMIT'];
        region = os.environ['REGION'];
        cmd = f'gcloud run deploy btpi-cti --image={registry}/{project_id}/btpi-cti:{tag}-{short_commit} --platform=managed --region={region} --allow-unauthenticated --set-env-vars=\"{env_vars}\"';
        subprocess.run(cmd, shell=True);
        "
    depends_on:
      - build-docker-images
    when:
      branch:
        - develop
  
  - name: notify-slack
    image: plugins/slack
    settings:
      webhook:
        from_secret: slack_webhook
      channel: deployments
      template: >
        *{{#success build.status}}✅ Build Succeeded{{else}}❌ Build Failed{{/success}}*
        *BTPI-CTI Deployment*
        *Branch:* ${DRONE_BRANCH}
        *Commit:* ${DRONE_COMMIT_LINK}
        *Author:* ${DRONE_COMMIT_AUTHOR}
        *Environment:* $${ENV}
        *Build:* ${DRONE_BUILD_LINK}
    depends_on:
      - deploy-to-gke
      - deploy-to-cloud-run

volumes:
  - name: docker_socket
    host:
      path: /var/run/docker.sock

---
kind: secret
name: gcp_credentials
get:
  path: gcp/service-account-key
  name: credentials

---
kind: secret
name: kubeconfig
get:
  path: kubernetes/config
  name: kubeconfig

---
kind: secret
name: vault_token
data: dev-only-token

---
kind: secret
name: slack_webhook
get:
  path: notifications/slack
  name: webhook
